{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "vmWeb": {
      "defaultValue": "",
      "type": "string"
    },
    "vmApp": {
      "defaultValue": "",
      "type": "string"
    },

    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "group": "Infrastructure settings",
        "description": "Change this value to your repo name if deploying from a fork"
      },
      "defaultValue": "https://raw.githubusercontent.com/EISSystemsDevOps/Automation/master/Resources"
    },
    //  "vmSize": {
    //  "defaultValue": "",
    //"type": "string",
    //"allowedValues": [
    //"Basic_A2",
    //"Standard_A1",
    //"Standard_A2",
    //"Standard_A3"
    //]
    //},
    "windowsOSVersion": {
      "type": "string",
      "defaultValue": "2012-R2-Datacenter",
      "allowedValues": [
        "2008-R2-SP1",
        "2012-Datacenter",
        "2012-R2-Datacenter",
        "2016-Nano-Server-Technical-Preview",
        "2016-Technical-Preview-with-Containers",
        "Windows-Server-Technical-Preview"
      ],
      "metadata": {
        "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version."
      }
    },
    "SubscriptionID": {
      "defaultValue": "",
      "type": "string"
    },
    "VNetRG": {
      "defaultValue": "",
      "type": "string"
    },
    "Vnetname": {
      "defaultValue": "",
      "type": "string"
    },
    "sku": {
      "defaultValue": "",
      "type": "string",
      "allowedValues": [
        "2008-R2-SP1",
        "2012-R2-Datacenter"
      ]
    },
    "storageAccountName": {
      "defaultValue": "",
      "type": "string"
    },
    "storageAcctContainerName": {
      "type": "string",
      "metadata": {
        "description": "Name of storage Account container for VHD placement."
      },
      "defaultValue": "vhds"
    },
    "storageAcctNewOrExisting": {
      "type": "string",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Use a new or existing storage account"
      },
      "defaultValue": "new"
    },
    "storageAcctResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "Resource Group for storage account for VHD placement. Only needed if using existing storage account"
      },
      "defaultValue": ""
    },
    "domainAdminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the Virtual Machine."
      }
    },
    "domainAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },
    "localAdminName": {
      "type": "string",
      "metadata": {
        "description": "Username for the Virtual Machine."
      }
    },
    "localAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },

    "privateIPaddress": {
      "type": "string"
    },

    "ExclusionsPaths": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Semicolon delimited list of file paths or locations to exclude from scanning"
      }
    },
    "ExclusionsExtensions": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Semicolon delimited list of file extensions to exclude from scanning"
      }
    },
    "ExclusionsProcesses": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Semicolon delimited list of process names to exclude from scanning"
      }
    },
    "RealtimeProtectionEnabled": {
      "type": "string",
      "defaultValue": "true",
      "metadata": {
        "description": "Indicates whether or not real time protection is enabled (default is true)"
      }
    },
    "ScheduledScanSettingsIsEnabled": {
      "type": "string",
      "defaultValue": "false",
      "metadata": {
        "description": "Indicates whether or not custom scheduled scan settings are enabled (default is false)"
      }
    },
    "ScheduledScanSettingsScanType": {
      "type": "string",
      "defaultValue": "Quick",
      "metadata": {
        "description": "Indicates whether scheduled scan setting type is set to Quick or Full (default is Quick)"
      }
    },
    "ScheduledScanSettingsDay": {
      "type": "string",
      "defaultValue": "7",
      "metadata": {
        "description": "Day of the week for scheduled scan (1-Sunday, 2-Monday, ..., 7-Saturday)"
      }
    },
    "ScheduledScanSettingsTime": {
      "type": "string",
      "defaultValue": "120",
      "metadata": {
        "description": "When to perform the scheduled scan, measured in minutes from midnight (0-1440). For example: 0 = 12AM, 60 = 1AM, 120 = 2AM."
      }
    }
  },
  //Start of variables
  "variables": {
    "Configurationurl": "https://raw.githubusercontent.com/EISSystemsDevOps/Automation/master/Resources/configurationdata.psd1",
    "NetworkInterfaceURI": "[concat(variables('TemplateUrl'),'/','network_interface.json')]",
    "TemplateUrl": "[concat(parameters('_artifactsLocation'),'/Templates')]",
    "subnetRef": "[concat('/subscriptions/',parameters('SubscriptionID'),'/resourceGroups/',parameters('VNetRG'),'/providers/Microsoft.Network/virtualNetworks/',parameters('VnetName'),'/subnets/Subnet-1')]",
    "VMURI": "[concat(variables('TemplateUrl'),'/','vm.json')]",
    //Environment VM Sizes
    "VMSize1": "Basic_A2",

    //NIC Objects
    "NICObject1": {
      "Name": "[concat(parameters('vmWeb'),'-nic')]",
      "subnetRef": "[variables('subnetRef')]"
    },
    "NICObject2": {
      "Name": "[concat(parameters('vmApp'),'-nic')]",
      "subnetRef": "[variables('subnetRef')]"
    },
    //VM Objects
    "VMObject1": {
      "Name": "[parameters('vmWeb')]",
      "Size": "[variables('VMSize1')]",
      //      "ASName": "[variables('ASObject1').Name]",
      "nicName": "[variables('NICObject1').Name]",
      "AdminUserName": "[parameters('localAdminName')]",
      "AdminPassword": "[parameters('localAdminPassword')]",
      "publisher": "MicrosoftWindowsServer",
      "offer": "WindowsServer",
      "sku": "[parameters('windowsOSVersion')]",
      "version": "latest",
      "storageAccountName": "[parameters('storageAccountName')]",
      "storageAccountContainerName": "[parameters('storageAcctContainerName')]",
      "Uri": "[variables('VMUri')]"
    },
    "vhdName": "[concat(parameters('vmWeb'), '-os-disk.vhd')]",

    "VMObject2": {
      "Name": "[parameters('vmApp')]",
      "Size": "[variables('VMSize1')]",
      //      "ASName": "[variables('ASObject1').Name]",
      "nicName": "[variables('NICObject2').Name]",
      "AdminUserName": "[parameters('localAdminName')]",
      "AdminPassword": "[parameters('localAdminPassword')]",
      "publisher": "MicrosoftWindowsServer",
      "offer": "WindowsServer",
      "sku": "[parameters('windowsOSVersion')]",
      "version": "latest",
      "storageAccountName": "[parameters('storageAccountName')]",
      "storageAccountContainerName": "[parameters('storageAcctContainerName')]",
      "Uri": "[variables('VMUri')]",
      "vhdName": "[concat(parameters('vmApp'), '-os-disk.vhd')]"
    },
    "StorageAccountURI": "[concat(variables('TemplateUrl'),'/',parameters('storageAcctNewOrExisting'),'_storage_account.json')]",
    "StorageAccountObject": {
      "Name": "[parameters('storageAccountName')]",
      "SkuName": "Standard_LRS",
      "ResourceGroup": "[parameters('storageAcctResourceGroup')]"
    }

  },
  "resources": [
    {
      "name": "VMResource1",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "[resourceid('Microsoft.Resources/deployments/', 'StorageAccountResource')]",
        "[resourceid('Microsoft.Resources/deployments/', 'NetworkInterfaceResource1')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('VMObject1').Uri]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "VMObject": {
            "value": "[variables('VMObject1')]"
          }
        }
      }
    },
    {
      "name": "VMResource2",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "[resourceid('Microsoft.Resources/deployments/', 'StorageAccountResource')]",
        "[resourceid('Microsoft.Resources/deployments/', 'NetworkInterfaceResource2')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('VMObject2').Uri]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "VMObject": {
            "value": "[variables('VMObject2')]"
          }
        }
      }
    },
    //networkProfile
    {
      "name": "NetworkInterfaceResource1",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-02-01",
      "dependsOn": [
        //       "[resourceid('Microsoft.Resources/deployments/', 'PublicIPResource2')]",
        //"[resourceid('Microsoft.Resources/deployments/', 'VirtualNetworkResource')]" //,
        //       "[resourceid('Microsoft.Resources/deployments/', 'LoadBalancerResource2')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('NetworkInterfaceURI')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {

          "NICObject": {
            "value": "[variables('NICObject1')]"
          }
        }
      }
    },
    {
      "name": "NetworkInterfaceResource2",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-02-01",
      "dependsOn": [
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('NetworkInterfaceURI')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {

          "NICObject": {
            "value": "[variables('NICObject2')]"
          }
        }
      }
    },
    //Storage Account 
    {
      "name": "StorageAccountResource",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-02-01",
      "dependsOn": [ ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('StorageAccountURI')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "StorageAccountObject": {
            //"value": "[concat(parameters('VMNameBRE'),'-','availabilityset')]"
            "value": "[variables('StorageAccountObject')]"
          }
        }
      }
    },

    //Antimalware extension
    {
      "name": "[concat(parameters('vmWeb'),'/IaaSAntimalware')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceid('Microsoft.Compute/virtualMachines/', parameters('vmWeb'))]"
      ],
      "apiVersion": "2015-06-15",
      "properties": {
        "publisher": "Microsoft.Azure.Security",
        "type": "IaaSAntimalware",
        "typeHandlerVersion": "1.3",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "AntimalwareEnabled": true,
          "RealtimeProtectionEnabled": "[parameters('RealtimeProtectionEnabled')]",
          "ScheduledScanSettings": {
            "isEnabled": "[parameters('ScheduledScanSettingsIsEnabled')]",
            "day": "[parameters('ScheduledScanSettingsDay')]",
            "time": "[parameters('ScheduledScanSettingsTime')]",
            "scanType": "[parameters('ScheduledScanSettingsScanType')]"
          },
          "Exclusions": {
            "Extensions": "[parameters('ExclusionsExtensions')]",
            "Paths": "[parameters('ExclusionsPaths')]",
            "Processes": "[parameters('ExclusionsProcesses')]"
          }
        }
      }
    }
  ]
    }
